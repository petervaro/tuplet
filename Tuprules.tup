## INFO ##
## INFO ##

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Constants
ifeq (@(TUP_PLATFORM),win32)
    LIB_EXT = dll
    OBJ_EXT = obj
    ARC_EXT = lib
    BIN_EXT = .exe
else
    LIB_EXT = so
    OBJ_EXT = o
    ARC_EXT = a
    BIN_EXT =
endif


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Decide which compiler to use
ifdef CCOMP
    CC_NAME = @(CCOMP)
else
    CC_NAME = clang
endif

# If compiler has a specific version
ifdef CCVER
    CC = $(CC_NAME)@(CCVER)
else
    CC = $(CC_NAME)
endif


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Decide which standard to use
ifdef CSTND
    STD = -std=@(CSTND)
else
    STD = -std=c11
endif


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Define generic warning flags
WARN  = -Wall
WARN += -Wextra
WARN += -Wpedantic

# If development/debug build
ifdef DEVEL
    WARN += -fstrict-aliasing
    WARN += -fsanitize=undefined,alignment
    # TODO: **sanitized address**
    #       At the moment for some reason -fsanitize=address breaks valgrind.
    #       More info: https://github.com/google/sanitizers/issues/303
    ifeq ($(CC_NAME),clang)
        WARN += -Weverything
    else
        ifeq ($(CC_NAME),gcc)
            WARN += -Wpadded
            WARN += -Wconversion
        endif
    endif
endif


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Define compiler flags
CFLAGS  = $(STD)
CFLAGS += $(WARN)

# If development/debug build
ifdef DEVEL
    CFLAGS += -g
    CFLAGS += -v
    CFLAGS += -O0
# If release build
else
    CFLAGS += -O3
endif

# Add compiler specific flags
ifeq ($(CC_NAME),clang)
    CFLAGS += -fcolor-diagnostics
    CFLAGS += -fmacro-backtrace-limit=0
else
    ifeq ($(CC_NAME),gcc)
        CFLAGS += -fdiagnostics-color=always
    endif
endif


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
ifeq (@(TUP_PLATFORM),win32)
    CPPPATH =
    LIBPATH =
else
    CPPPATH  = -I/usr/include
    CPPPATH += -I/usr/local/include
    LIBPATH  = -L/usr/lib
    LIBPATH += -L/usr/local/lib
endif


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Directory of the source files
ifdef SOURCE_INPUT_DIR
    SOURCE_DIR = @(SOURCE_INPUT_DIR)
else
    SOURCE_DIR = src
endif

# Directory of header files
ifdef INCLUDE_INPUT_DIR
    INCLUDE_DIR = @(INCLUDE_INPUT_DIR)
else
    INCLUDE_DIR = include
endif

# Directory of libraries
ifdef LIBRARY_OUTPUT_DIR
    LIBRARY_DIR = @(LIBRARY_OUTPUT_DIR)
else
    LIBRARY_DIR = lib
endif

# Directory of compiled executables
ifdef BINARY_OUTPUT_DIR
    BINARY_DIR = @(BINARY_OUTPUT_DIR)
else
    BINARY_DIR = bin
endif

# Directpry of generated files and compiled objects
ifdef TEMPORARY_OUTPUT_DIR
    BUILD_DIR = @(TEMPORARY_OUTPUT_DIR)
else
    BUILD_DIR = build
endif

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Helper commands
_RM_BLANK = python -c "from sys import stdin, stdout; from re import sub, M; \
            stdout.write(sub(r'\n{3,}', '\n'*2, stdin.read(), flags=M))"


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Compile sources to objects
!to_obj =                                                                      \
    |> ^ OBJ: %f => %o^                                                        \
        $(CC) $(CFLAGS) $(CPPPATH) -fPIC -o %o -c %f                           \
    |>

#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Combine objects to shared object (dynamic library)
!to_lib =                                                                      \
    |> ^ LIB: %f => %o^                                                        \
        $(CC) -shared -o %o %f                                                 \
    |>


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Combine objects to archive (static library)
!to_arc =                                                                      \
    |> ^ ARC: %f => %o^                                                        \
        ar rcs %o %f                                                           \
    |>


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Run pre-processor only
!to_cpp =                                                                      \
    |> ^ CPP: %f => %o^                                                        \
        $(CC) $(CFLAGS) $(CPPPATH) -CC -E -P %f | $(_RM_BLANK) > %o            \
    |>


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Combine objects to a binary (executable)
!to_bin =                                                                      \
    |> ^ BIN: %f => %o^                                                        \
        $(CC) $(CFLAGS) $(LIBPATH) $(CPPPATH) -o %o %f                         \
    |>


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# If development/debug build
ifdef DEVEL
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    # Statically analyze compiling source to objects
    !scan_obj =                                                                \
        |> ^ OBJ: scan-build %f => /dev/null^                                  \
            scan-build -o $(BUILD_DIR)/scan-out                                \
            $(CC) $(CFLAGS) $(CPPPATH) -fPIC -o /dev/null -c %f                \
        |>

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    # Statically analyze combining objects to shared object (dynamic library)
    !scan_lib =                                                                \
        |> ^ LIB: scan-build %f => /dev/null^                                  \
            scan-build -o $(BUILD_DIR)/scan-out                                \
            $(CC) -shared -o /dev/null %f                                      \
        |>

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    # Statically analyze combining objects to archive (static library)
    !scan_arc =                                                                \
        |> ^ ARC: scan-build %f => /dev/null^                                  \
            scan-build -o $(BUILD_DIR)/scan-out                                \
            ar rcs /dev/null %f                                                \
        |>

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    # Statically analyze combining objects to archive (static library)
    !scan_bin =                                                                \
        |> ^ BIN: scan-build %f => /dev/null^                                  \
            scan-build -o $(BUILD_DIR)/scan-out                                \
            $(CC) $(CFLAGS) $(LIBPATH) $(CPPPATH) -o /dev/null %f              \
        |>

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    # Run binary via valgrind
    VALGRIND += --leak-check=full
    VALGRIND += --track-origins=yes
    !run_it =                                                                  \
        |> ^ RUN: valgrind %f^                                                 \
            $(ENV_VARS) valgrind $(VALGRIND) ./%f                              \
        |>
# If release build
else
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    # Do nothing
    !scan_obj = |> |>
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    !scan_lib = |> |>
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    !scan_arc = |> |>
    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    !scan_bin = |> |>

    #- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
    # Run binary
    !run_it =                                                                  \
        |> ^ RUN: %f^                                                          \
            $(ENV_VARS) ./%f                                                   \
        |>
endif


#- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - #
# Print pretty separator
!pretty = |> python -c "print('\n'*2 + '\033[1m' + '- '*40 + '\033[0m')" |>
